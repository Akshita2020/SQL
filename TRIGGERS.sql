USE SIMPLELEARN;

/* DIFFRENCE BETWEEN --> 

A stored procedure is a user defined piece of code written in the local version of PL/SQL, 
which may return a value (making it a function) that is invoked by calling it explicitly.

A trigger is a stored procedure that runs automatically when various events happen
 (eg update, insert, delete).
 
 
TRIGGERS --
TRIGGERS  ARE THE SQL STATEMENTS THAT ARE AUTOMATICALLY EXCUTED WHEN THERE IS ANY CHANGEE IN THE 
DATABASE. THE TRIGGERS ARE EXCUTED IN RESPONSE TO CERTAIN EVENT(INSERT, UPDATE OR DELETE) IN A PARTICULAR 
TABLE. THESE TRIGGERS HELP IN MAINTAING THE DATA INTERGRITY BY CHANGING THE DATA OF THE DATABASE

WHY WE USE TRIGGERS? 
1. REDUCE REDUNDANT CODE 
2. MAINTAIN MULTIPLE COLUMN CONSTRAINT 
3. INCREASE PERFORMANCE 

TYPES OF TRIGGER 
BEFORE/ AFTER INSERT, UPDATE AND DELETE 
*/

-- BEFORE INSERT TRIGGER 
DELIMITER //
CREATE TRIGGER DEPT_INSERT
BEFORE INSERT ON employee1
FOR EACH ROW
BEGIN
    IF NEW.DEPARTMENT_ID < 10 THEN
        SET NEW.DEPARTMENT_ID = 0;
    END IF;
END//
DELIMITER ;

SELECT * FROM EMPLOYEE1;



SELECT*FROM EMPLOYEE1;
INSERT INTO EMPLOYEE1 VALUES (22, 'VIDHI', 'GUPTA', 'VIDHI.GUPTA@GMAIL.COM', 1934834847, '2023-09-01', 'NAV68', 7328.00, 8, 19);

-- AFTER INSERT TRIGGER 

DELIMITER // 
CREATE TRIGGER AFTER_INSERT 
AFTER INSERT ON CUSTOMER 
FOR EACH ROW 
BEGIN 
IF NEW.ID > 20 THEN 
INSERT INTO CUSTOMER_NEW VALUES (NEW.CUSTID, NEW.NAME, NEW.AGE, NEW.ADDRESS);
END IF;
END //


-- BEFORE UPDATE TRIGGER 

ALTER TABLE EMPLOYEE1 ADD COLUMN BONUS VARCHAR(5);
DELIMITER // 
CREATE TRIGGER BEFORE_UPDATE
BEFORE UPDATE ON employee1
FOR each row
BEGIN
IF NEW.SALARY > 40000 THEN SET NEW.BONUS = 5000;
ELSE IF NEW.SALARY <40000 THEN SET NEW.BONUS = 3000;
END IF;
END IF;
END //

UPDATE EMPLOYEE1 SET SALARY = 45000 WHERE EMPLOYEE_ID> 15;

COMMIT;