CREATE DATABASE BANK; 
USE BANK;

CREATE TABLE ACCOUNT_HOLDER (
CUSTOMER_ID INT PRIMARY KEY auto_increment ,
ACCOUNT_NUMBER VARCHAR(20) UNIQUE NOT NULL,
CUSTOMER_NAME VARCHAR (50) NOT NULL, 
AADHARCARD VARCHAR(100) UNIQUE NOT NULL,
ADDRESS VARCHAR(100) NOT NULL,
ACCOUNT_TYPE VARCHAR(20) NOT NULL
);

CREATE TABLE TRANSACTIONS (
CUSTOMER_ID INT NOT NULL ,
TRANSACTION_ID VARCHAR(20) PRIMARY KEY,
DETAILS VARCHAR(500),
AMOUNT FLOAT,
CREDIT INT, 
DEBIT INT, 
STATUS ENUM( 'FAILED', 'SUCCEED', 'HOLD')
); 

CREATE TABLE LOANS (
CUSTOMER_ID INT NOT NULL,
LOAN_ID INT PRIMARY KEY,
LOAN_TYPE VARCHAR(50),
AMOUNT FLOAT,
SIMPLE_INTREST FLOAT,
COMPOUND_INTREST FLOAT ,
START_YEAR DATE,
END_YEAR DATE 
);


USE BANK;

-- Inserting data into ACCOUNT_HOLDER table
INSERT INTO ACCOUNT_HOLDER (ACCOUNT_NUMBER, CUSTOMER_NAME, AADHARCARD, ADDRESS, ACCOUNT_TYPE)
VALUES 
('IN123456789', 'Ramesh Kumar', '1234 5678 9012', '123, ABC Street, Delhi', 'Savings'),
('IN234567890', 'Sunita Sharma', '2345 6789 0123', '456, XYZ Road, Mumbai', 'Current'),
('IN345678901', 'Priya Patel', '3456 7890 1234', '789, PQR Avenue, Bangalore', 'Savings'),
('IN456789012', 'Amit Singh', '4567 8901 2345', '987, LMN Lane, Kolkata', 'Current'),
('IN567890123', 'Divya Gupta', '5678 9012 3456', '654, DEF Colony, Chennai', 'Savings'),
('IN678901234', 'Vikram Malhotra', '6789 0123 4567', '321, GHI Street, Hyderabad', 'Current'),
('IN789012345', 'Anita Verma', '7890 1234 5678', '246, JKL Road, Pune', 'Savings'),
('IN890123456', 'Rajesh Tiwari', '8901 2345 6789', '753, MNO Avenue, Ahmedabad', 'Current'),
('IN901234567', 'Neha Reddy', '9012 3456 7890', '159, OPQ Lane, Jaipur', 'Savings'),
('IN012345678', 'Suresh Mehta', '0123 4567 8901', '852, STU Colony, Chandigarh', 'Current');

-- Inserting data into TRANSACTIONS table
INSERT INTO TRANSACTIONS (CUSTOMER_ID, TRANSACTION_ID, DETAILS, AMOUNT, CREDIT, DEBIT, STATUS)
VALUES 
(1, 'TXN123456789', 'Salary Deposit', 30000, 1, 0, 'SUCCEED'),
(2, 'TXN234567890', 'Online Purchase', 5000, 0, 1, 'SUCCEED'),
(3, 'TXN345678901', 'ATM Withdrawal', 2000, 0, 1, 'SUCCEED'),
(4, 'TXN456789012', 'Bill Payment', 1500, 0, 1, 'SUCCEED'),
(5, 'TXN567890123', 'Interest Credit', 1000, 1, 0, 'SUCCEED'),
(6, 'TXN678901234', 'Loan Repayment', 7000, 1, 0, 'SUCCEED'),
(7, 'TXN789012345', 'Online Transfer', 3000, 0, 1, 'SUCCEED'),
(8, 'TXN890123456', 'Cheque Deposit', 10000, 1, 0, 'SUCCEED'),
(9, 'TXN901234567', 'Utility Bill Payment', 2500, 0, 1, 'SUCCEED'),
(10, 'TXN012345678', 'Cash Deposit', 5000, 1, 0, 'SUCCEED');

-- Inserting data into LOANS table
INSERT INTO LOANS (CUSTOMER_ID, LOAN_ID, LOAN_TYPE, AMOUNT, SIMPLE_INTREST, COMPOUND_INTREST, START_YEAR, END_YEAR)
VALUES 
(1, 101, 'Personal Loan', 500000, 10.5, 12.5, '2022-01-01', '2024-01-01'),
(2, 102, 'Home Loan', 1000000, 8.5, 11.2, '2021-06-01', '2031-06-01'),
(3, 103, 'Car Loan', 300000, 9.0, 12.0, '2023-03-01', '2025-03-01'),
(4, 104, 'Education Loan', 800000, 7.5, 10.0, '2022-08-01', '2027-08-01'),
(5, 105, 'Business Loan', 1500000, 9.8, 12.8, '2022-11-01', '2025-11-01'),
(6, 106, 'Personal Loan', 400000, 11.0, 14.0, '2021-09-01', '2023-09-01'),
(7, 107, 'Home Loan', 1200000, 8.0, 10.5, '2023-05-01', '2033-05-01'),
(8, 108, 'Car Loan', 250000, 9.2, 12.2, '2021-12-01', '2024-12-01'),
(9, 109, 'Education Loan', 700000, 8.0, 11.0, '2022-07-01', '2027-07-01'),
(10, 110, 'Business Loan', 2000000, 9.5, 13.0, '2023-04-01', '2028-04-01');


-- AGGREAGATE FUNCTION 
SELECT C.CUSTOMER_NAME,C.CUSTOMER_ID, C.ACCOUNT_NUMBER, L.AMOUNT, L.LOAN_TYPE,
SUM(L.AMOUNT) OVER (partition by C.CUSTOMER_ID ORDER BY L.START_YEAR) AS TOTAL_AMOUNT
FROM  ACCOUNT_HOLDER C
INNER JOIN LOANS L 
ON L.CUSTOMER_ID = C.CUSTOMER_ID;  

SELECT C.CUSTOMER_NAME,C.CUSTOMER_ID, C.ACCOUNT_NUMBER, L.AMOUNT, L.LOAN_TYPE,
MAX(L.AMOUNT) OVER (partition by C.CUSTOMER_ID ORDER BY L.START_YEAR) AS TOTAL_AMOUNT
FROM  ACCOUNT_HOLDER C
INNER JOIN LOANS L 
ON L.CUSTOMER_ID = C.CUSTOMER_ID;  

SELECT C.CUSTOMER_NAME,C.CUSTOMER_ID, C.ACCOUNT_NUMBER, L.AMOUNT, L.LOAN_TYPE,
MIN(L.AMOUNT) OVER (partition by C.CUSTOMER_ID ORDER BY L.START_YEAR) AS TOTAL_AMOUNT
FROM  ACCOUNT_HOLDER C
INNER JOIN LOANS L 
ON L.CUSTOMER_ID = C.CUSTOMER_ID;  

SELECT C.CUSTOMER_NAME,C.CUSTOMER_ID, C.ACCOUNT_NUMBER, L.AMOUNT, L.LOAN_TYPE,
AVG(L.AMOUNT) OVER (partition by C.CUSTOMER_ID ORDER BY L.START_YEAR) AS TOTAL_AMOUNT
FROM  ACCOUNT_HOLDER C
INNER JOIN LOANS L 
ON L.CUSTOMER_ID = C.CUSTOMER_ID;  

COMMIT;


