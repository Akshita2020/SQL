USE UNIVERSITY; 


CREATE TABLE Students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    date_of_birth DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE Courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    description TEXT,
    instructor VARCHAR(100),
    start_date DATE,
    end_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE Enrollments (
    enrollment_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    course_id INT,
    enrollment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);


INSERT INTO Students (first_name, last_name, email, date_of_birth)
VALUES 
    ('AKSHITA', 'TIWARI', 'AKSHITA.TIWARI1970@GMAIL.COM', '2000-03-12'),
    ('AKSHAT', 'DAVE', 'AKSHat.DAVE1970@GMAIL.COM', '1998-03-09'),
    ('SONAM', 'PATEL', 'SONAM.PATEL1980@GMAIL.COM', '1999-02-02'),
    ('POORNIMA', 'TIWARI', 'POORNIMA.TIWARI@GMAIL.COM', '2000-04-04'),
    ('AAYUSH', 'SOLANKI', 'AAYUSH.SOLANKI2070@GMAIL.COM', '1999-07-08'),
    ('SANSKRITI', 'SOLANKI', 'SANSKIRITI.SOLANKI1970@GMAIL.COM', '2004-03-05'),
    ('SHAILY', 'JAISWAL', 'SHAILY.JAISWAL1970@GMAIL.COM', '1998-07-03'),
    ('ISHIKA', 'SHARMA', 'ISHIKA.SHARMA1970@GMAIL.COM', '2000-09-09'),
    ('MUSKAN', 'CHAUREY', 'MUSKAN.CHOREY1770@GMAIL.COM', '2001-03-08'),
    ('PARUL', 'PAL', 'PARUL.PAL1870@GMAIL.COM', '2003-03-09');
    
INSERT INTO Courses (title, description, instructor, start_date, end_date)
VALUES 
    ('Introduction to Programming', 'Learn basic programming concepts', 'AKSHAT DAVE', '2024-03-01', '2024-04-30'),
    ('Data Science ', 'Introduction to data science techniques', 'AKSHITA TIWARI', '2024-02-15', '2024-04-15'),
     ('Web Development program', 'Learn basic web developing concepts', 'POORNIMA TIWARI', '2024-02-15', '2024-04-15'),
      ('Full Stack ', 'Learn front-end, back-end techniques', 'SONAMPATEL', '2024-01-15', '2024-08-15'),
       ('Data Analtics ', 'Introduction to data analytics techniques', 'SANSKIRITI SOLANKI', '2024-01-10', '2024-04-15'),
        ('C Programming', 'Introduction to C programming techniques', 'AAYUSH SOLANKI', '2023-05-10', '2024-05-10'),
         ('C++ Programming ', 'Introduction to C++ programming techniques', 'ISHIKA SHARMA', '2024-02-15', '2025-04-15'),
          ('Python', 'Introduction to Python programming techniques', 'SHAILY JAISWAL', '2022-02-15', '2024-03-12'),
           (' SQL developer', 'Introduction to SQL development techniques', 'MUSKAN CHOREY', '2022-01-15', '2024-03-15'),
            ('JAVA Programming', 'Introduction to java programming techniques', 'PARUL PAL', '2024-01-09', '2025-03-06');


INSERT INTO Enrollments (student_id, course_id)
VALUES
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6),
    (7, 7),
    (8, 8),
	(9, 9),
	(10, 10);
    
    
-- LEFT JOIN USING STUDENT AND COURSE TABLE 
SELECT*FROM STUDENTS;
SELECT*FROM COURSES;
SELECT*FROM ENROLLMENTS;
    
SELECT S.STUDENT_ID, S.FIRST_NAME, S.LAST_NAME, C.COURSE_ID, C.TITLE, C.INSTRUCTOR 
FROM STUDENTS S
LEFT JOIN ENROLLMENTS E ON S.STUDENT_ID = E.STUDENT_ID
LEFT JOIN COURSES C ON E.COURSE_ID = C.COURSE_ID; 

-- LEFT JOIN USING STUDENT AND ENROLLMENT TABLE 
SELECT DISTINCT S.STUDENT_ID, S.FIRST_NAME, S.LAST_NAME, E.ENROLLMENT_DATE
FROM STUDENTS S 
LEFT JOIN ENROLLMENTS E
ON S.STUDENT_ID =  S.STUDENT_ID ;

-- RIGHT JOIN USING STUDENT AND COURSE TABLE 
SELECT*FROM STUDENTS;
SELECT*FROM COURSES;
SELECT*FROM ENROLLMENTS;
    
SELECT S.STUDENT_ID, S.FIRST_NAME, S.LAST_NAME, C.COURSE_ID, C.TITLE, C.INSTRUCTOR 
FROM STUDENTS S
RIGHT JOIN ENROLLMENTS E ON S.STUDENT_ID = E.STUDENT_ID
RIGHT JOIN COURSES C ON E.COURSE_ID = C.COURSE_ID; 


-- RIGHT JOIN USING STUDENT AND ENROLLMENT TABLE 
SELECT DISTINCT S.STUDENT_ID, S.FIRST_NAME, S.LAST_NAME, E.ENROLLMENT_DATE
FROM STUDENTS S 
RIGHT JOIN ENROLLMENTS E
ON S.STUDENT_ID =  S.STUDENT_ID ;


-- INNER JOIN USING STUDENT AND COURSE TABLE 
SELECT*FROM STUDENTS;
SELECT*FROM COURSES;
SELECT*FROM ENROLLMENTS;
    
SELECT S.STUDENT_ID, S.FIRST_NAME, S.LAST_NAME, C.COURSE_ID, C.TITLE, C.INSTRUCTOR 
FROM STUDENTS S
INNER JOIN ENROLLMENTS E ON S.STUDENT_ID = E.STUDENT_ID
INNER JOIN COURSES C ON E.COURSE_ID = C.COURSE_ID; 

-- INNER JOIN USING STUDENT AND ENROLLMENT TABLE 
SELECT DISTINCT S.STUDENT_ID, S.FIRST_NAME, S.LAST_NAME,E.ENROLLMENT_ID, E.ENROLLMENT_DATE
FROM STUDENTS S 
INNER JOIN ENROLLMENTS E
ON S.STUDENT_ID =  S.STUDENT_ID;

-- SELF JOIN  ON STUDENT TABLE 
SELECT*FROM STUDENTS;
SELECT DISTINCT S1.STUDENT_ID, S1.first_name, S2.first_name AS friend_name
FROM Students S1
JOIN Students S2 ON S1.STUDENT_ID <> S2.STUDENT_ID;

SELECT*FROM COURSES;
SELECT C.COURSE_ID, C.TITLE, C1.INSTRUCTOR 
FROM COURSES C
JOIN COURSES C1 ON C.course_id <> C1.COURSE_ID;

-- CROSS JOIN
SELECT S.student_id, S.first_name, C.course_id, C.title
FROM Students S
CROSS JOIN Courses C;   

-- DATETIME FUNCTIONS 
SELECT*FROM STUDENTS;
SELECT*FROM COURSES;
SELECT*FROM ENROLLMENTS;

SELECT 
    DATE(ENROLLMENT_DATE)
FROM
    ENROLLMENTS;
    
SELECT 
    TIME(ENROLLMENT_DATE)
FROM
    ENROLLMENTS;
    
SELECT 
    YEAR(ENROLLMENT_DATE)
FROM
    ENROLLMENTS;
    
SELECT 
    MONTH(START_DATE) AS MONTH
FROM
    COURSES;
    
SELECT 
    DAY(ENROLLMENT_DATE)
FROM
    ENROLLMENTS;
    
SELECT 
    MONTHNAME(START_DATE) AS MONTH_NAME
FROM
    COURSES;
    
SELECT 
    LAST_DAY(START_DATE) AS LAST_DAY
FROM
    COURSES;
    
SELECT 
    WEEK(START_DATE) AS WEEK_NAME
FROM
    COURSES;
    
SELECT 
    DAYNAME(START_DATE) AS DAYNAME_NAME
FROM
    COURSES;
    
SELECT 
    WEEKDAY(START_DATE) AS WEEK_DAY
FROM
    COURSES;
    
	SELECT 
    TIMESTAMPDIFF(DAY, START_DATE, END_DATE)
FROM
    COURSES;
    
SELECT 
    TIMESTAMPDIFF(WEEK,
        START_DATE,
        END_DATE)
FROM
    COURSES;
    
	SELECT 
    TIMESTAMPDIFF(HOUR,
        START_DATE,
        END_DATE)
FROM
    COURSES;
    
	SELECT 
    TIMESTAMPDIFF(MINUTE,
        START_DATE,
        END_DATE)
FROM
    COURSES;
    
SELECT 
    TIMESTAMPDIFF(SECOND,
        START_DATE,
        END_DATE)
FROM
    COURSES;


-- STRING FUNCTIONS  
SELECT 
    CONCAT(FIRST_NAME, '-', LAST_NAME)
FROM
    STUDENTS;
    
SELECT 
    LENGTH(FIRST_NAME)
FROM
    STUDENTS;
    
SELECT 
    UPPER(EMAIL)
FROM
    STUDENTS;
    
SELECT 
    LOWER(EMAIL)
FROM
    STUDENTS;
    
SELECT 
    REVERSE(FIRST_NAME) AS REVERSED_NAME
FROM
    STUDENTS;
    
SELECT 
    SUBSTRING(FIRST_NAME, 2, 6)
FROM
    STUDENTS;
    
SELECT 
    LEFT(FIRST_NAME, 3)
FROM
    STUDENTS;
    
SELECT 
    RIGHT(FIRST_NAME, 3)
FROM
    STUDENTS; 


-- NUMERIC FUNCTION 
SELECT*FROM STUDENTS;
SELECT*FROM COURSES;
SELECT*FROM ENROLLMENTS;


-- WINDOW FUNCTION 
SELECT STUDENT_ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, row_number() OVER (ORDER BY DATE_OF_BIRTH) FROM STUDENTS;
SELECT TITLE, row_number() OVER (ORDER BY START_DATE) AS ROW_NUM FROM COURSES ;

  -- ASSIGNING UNIQUE NUMBER TO EACH ROW AND ROW NUMBER IS PROVIDED  UNIQUE NUMBER TO EACH ROW 
SELECT STUDENT_ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, row_number() OVER (ORDER BY DATE_OF_BIRTH) FROM STUDENTS ;

SELECT TITLE, row_number() OVER (ORDER BY START_DATE) AS ROW_NUM FROM COURSES ;

-- RANK () 
SELECT STUDENT_ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, RANK() OVER (ORDER BY DATE_OF_BIRTH) AS RANK_NUM FROM STUDENTS ;

-- DENSE RANK()
SELECT  STUDENT_ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, DENSE_RANK() OVER (ORDER BY DATE_OF_BIRTH) AS DENSE_RANK_NUM FROM STUDENTS;
SELECT  STUDENT_ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, row_number() OVER (ORDER BY DATE_OF_BIRTH) AS ROW_NUM FROM STUDENTS ;


 /* Question 5: 
Based on the existing tables (students, courses, and enrollments), add the following additional 
columns to each table: */
-- Question 6:
/* Insert 10 records into each of the tables: students, courses, and enrollments, ensuring that the newly 
added columns are appropriately populated.  */

-- For Students Table: 

ALTER TABLE STUDENTS 
ADD COLUMN ADDRESS VARCHAR(255),
ADD COLUMN  phone_number VARCHAR(20),
ADD COLUMN GENDER ENUM('Male', 'Female', 'Other'),
ADD COLUMN nationality VARCHAR(50),
ADD COLUMN  guardian_name VARCHAR(100);

UPDATE STUDENTS SET ADDRESS = 
CASE 
WHEN STUDENT_ID = 1 THEN '123, RAJ-MOHALLA, INDORE'
WHEN STUDENT_ID = 2 THEN '213, BHARKUWA,INDORE'
WHEN STUDENT_ID = 3 THEN '345, SHIVAJI-VATIKA, INDORE'
WHEN STUDENT_ID = 4 THEN '654, RAJWADA, INDORE'
WHEN STUDENT_ID = 5 THEN '234, VIJAYMAGAR, INDORE'
WHEN STUDENT_ID = 6 THEN '876, KALANI-NAGAR, INDORE'
WHEN STUDENT_ID = 7 THEN '234, RAJIV-GANDHI, INDORE'
WHEN STUDENT_ID = 8 THEN '123, CHOITRAM, INDORE'
WHEN STUDENT_ID = 9 THEN '876, NAVLAKHA,INDORE'
WHEN STUDENT_ID = 10 THEN '345, PATNIPURA, INDORE'
END 
WHERE STUDENT_ID IN (1,2,3,4,5,6,7,8,9,10);


UPDATE STUDENTS SET phone_number = 
CASE 
WHEN STUDENT_ID = 1 THEN 123456789
WHEN STUDENT_ID = 2 THEN 987654321
WHEN STUDENT_ID = 3 THEN 356235624
WHEN STUDENT_ID = 4 THEN 717236263
WHEN STUDENT_ID = 5 THEN 236236367
WHEN STUDENT_ID = 6 THEN 615532737
WHEN STUDENT_ID = 7 THEN 623561235
WHEN STUDENT_ID = 8 THEN 127237367
WHEN STUDENT_ID = 9 THEN 323366367
WHEN STUDENT_ID = 10 THEN 72892808
END 
WHERE STUDENT_ID IN (1,2,3,4,5,6,7,8,9,10);  

UPDATE STUDENTS SET GENDER = 
CASE 
WHEN STUDENT_ID = 1 THEN 'FEMALE'
WHEN STUDENT_ID = 2 THEN 'MALE'
WHEN STUDENT_ID = 3 THEN 'FEMALE'
WHEN STUDENT_ID = 4 THEN 'FEMALE'
WHEN STUDENT_ID = 5 THEN 'MALE'
WHEN STUDENT_ID = 6 THEN 'FEMALE'
WHEN STUDENT_ID = 7 THEN 'FEMALE'
WHEN STUDENT_ID = 8 THEN 'FEMALE'
WHEN STUDENT_ID = 9 THEN 'FEMALE'
WHEN STUDENT_ID = 10 THEN 'FEMALE'
END 
WHERE STUDENT_ID IN (1,2,3,4,5,6,7,8,9,10);

UPDATE STUDENTS SET guardian_name = 
CASE 
WHEN STUDENT_ID = 1 THEN 'SUHANI TIWARI '
WHEN STUDENT_ID = 2 THEN 'MOHAN DAVE'
WHEN STUDENT_ID = 3 THEN 'MANMOHAN PATEL'
WHEN STUDENT_ID = 4 THEN 'SHIVKUMAR TIWARI'
WHEN STUDENT_ID = 5 THEN 'ROHAN SOLANKI'
WHEN STUDENT_ID = 6 THEN 'AKSHAT SOLANKI'
WHEN STUDENT_ID = 7 THEN 'MONU JAISWAL'
WHEN STUDENT_ID = 8 THEN 'KRISHNA SHARMA'
WHEN STUDENT_ID = 9 THEN 'JYOTI CHAUREY'
WHEN STUDENT_ID = 10 THEN 'SHYAMLAL PAL'
END 
WHERE STUDENT_ID IN (1,2,3,4,5,6,7,8,9,10);

UPDATE STUDENTS 
	SET NATIONALITY = 'INDIA' 
WHERE STUDENT_ID IN (1,2,3,4,5,6,7,8,9,10);

SELECT*FROM STUDENTS;

-- For Courses Table: 
ALTER TABLE COURSES 
ADD COLUMN DEPARTMENT VARCHAR(50),
ADD COLUMN credit_hours INT,
ADD COLUMN location VARCHAR(100),
ADD COLUMN level ENUM('Undergraduate', 'Postgraduate', 'Diploma', 'Certificate'), 
ADD COLUMN status ENUM('Active', 'Inactive');

UPDATE COURSES SET credit_hours= 
CASE 
WHEN COURSE_ID = 1 THEN 2
WHEN COURSE_ID = 2 THEN 4
WHEN COURSE_ID = 3 THEN 3
WHEN COURSE_ID = 4 THEN 1
WHEN COURSE_ID = 5 THEN 5
WHEN COURSE_ID = 6 THEN 2
WHEN COURSE_ID = 7 THEN 3
WHEN COURSE_ID = 8 THEN 1
WHEN COURSE_ID = 9 THEN 2
WHEN COURSE_ID = 10 THEN 3
END 
WHERE COURSE_ID IN (1,2,3,4,5,6,7,8,9,10);

UPDATE COURSES SET location = 
CASE 
WHEN COURSE_ID = 1 THEN 'FLOOR NO 1'
WHEN COURSE_ID = 2 THEN 'FLOOR NO 2'
WHEN COURSE_ID = 3 THEN  'FLOOR NO 3'
WHEN COURSE_ID = 4 THEN 'FLOOR NO 1'
WHEN COURSE_ID = 5 THEN 'FLOOR NO 5'
WHEN COURSE_ID = 6 THEN 'FLOOR NO 2'
WHEN COURSE_ID = 7 THEN  'FLOOR NO 7'
WHEN COURSE_ID = 8 THEN 'FLOOR NO 6'
WHEN COURSE_ID = 9 THEN 'FLOOR NO 9'
WHEN COURSE_ID = 10 THEN 'FLOOR NO 4'
END 
WHERE COURSE_ID IN (1,2,3,4,5,6,7,8,9,10);


UPDATE COURSES SET level = 
CASE 
WHEN COURSE_ID = 1 THEN 'Postgraduate'
WHEN COURSE_ID = 2 THEN 'Undergraduate'
WHEN COURSE_ID = 3 THEN  'Certificate'
WHEN COURSE_ID = 4 THEN 'Certificate'
WHEN COURSE_ID = 5 THEN 'Postgraduate'
WHEN COURSE_ID = 6 THEN 'Certificate'
WHEN COURSE_ID = 7 THEN  'Undergraduate'
WHEN COURSE_ID = 8 THEN 'Postgraduate'
WHEN COURSE_ID = 9 THEN 'Diploma'
WHEN COURSE_ID = 10 THEN 'Undergraduate'
END 
WHERE COURSE_ID IN (1,2,3,4,5,6,7,8,9,10);
 
 UPDATE COURSES SET  status = 
CASE 
WHEN COURSE_ID = 1 THEN 'Active'
WHEN COURSE_ID = 2 THEN 'Inactive'
WHEN COURSE_ID = 3 THEN  'Inactive'
WHEN COURSE_ID = 4 THEN 'Active'
WHEN COURSE_ID = 5 THEN 'Inactive'
WHEN COURSE_ID = 6 THEN 'Active'
WHEN COURSE_ID = 7 THEN  'Active'
WHEN COURSE_ID = 8 THEN 'Inactive'
WHEN COURSE_ID = 9 THEN 'Active'
WHEN COURSE_ID = 10 THEN 'Inactive'
END 
WHERE COURSE_ID IN (1,2,3,4,5,6,7,8,9,10);

 
 -- For Enrollments Table: 
ALTER TABLE ENROLLMENTS 
 ADD COLUMN grade VARCHAR(2),
 ADD COLUMN attendance INT, 
 ADD COLUMN withdrawn  BOOLEAN, 
 ADD COLUMN feedback TEXT, 
 ADD COLUMN exam_date DATE ;
 
  UPDATE ENROLLMENTS SET grade = 
CASE 
WHEN  ENROLLMENT_ID = 1 THEN 'A'
WHEN ENROLLMENT_ID = 2 THEN 'B'
WHEN ENROLLMENT_ID = 3 THEN  'A+'
WHEN ENROLLMENT_ID = 4 THEN 'B'
WHEN ENROLLMENT_ID= 5 THEN 'B+'
WHEN ENROLLMENT_ID = 6 THEN 'C'
WHEN ENROLLMENT_ID = 7 THEN  'A'
WHEN ENROLLMENT_ID= 8 THEN 'D'
WHEN ENROLLMENT_ID = 9 THEN 'E'
WHEN ENROLLMENT_ID= 10 THEN 'C'
END 
WHERE ENROLLMENT_ID IN (1,2,3,4,5,6,7,8,9,10);


UPDATE ENROLLMENTS SET FEEDBACK = 
CASE 
WHEN  ENROLLMENT_ID = 1 THEN 'Excellent course!'
WHEN ENROLLMENT_ID = 2 THEN 'Great experience overall.'
WHEN ENROLLMENT_ID = 3 THEN  'Had to withdraw due to personal reasons.'
WHEN ENROLLMENT_ID = 4 THEN 'Top-notch instruction!'
WHEN ENROLLMENT_ID= 5 THEN 'Very informative course material.'
WHEN ENROLLMENT_ID = 6 THEN 'Enjoyed the course content.'
WHEN ENROLLMENT_ID = 7 THEN  'Found it difficult to keep up with the pace.'
WHEN ENROLLMENT_ID= 8 THEN 'Highly recommend this course!'
WHEN ENROLLMENT_ID = 9 THEN 'Satisfied with the course structure.'
WHEN ENROLLMENT_ID= 10 THEN 'Decided to withdraw due to scheduling conflicts.'
END 
WHERE ENROLLMENT_ID IN (1,2,3,4,5,6,7,8,9,10);

  UPDATE ENROLLMENTS SET EXAM_DATE = 
CASE 
WHEN  ENROLLMENT_ID = 1 THEN '2024-03-01'
WHEN ENROLLMENT_ID = 2 THEN '2024-03-02'
WHEN ENROLLMENT_ID = 3 THEN  '2024-03-03'
WHEN ENROLLMENT_ID = 4 THEN '2024-03-04'
WHEN ENROLLMENT_ID= 5 THEN '2024-03-05'
WHEN ENROLLMENT_ID = 6 THEN '2024-03-06'
WHEN ENROLLMENT_ID = 7 THEN  '2024-03-07'
WHEN ENROLLMENT_ID= 8 THEN '2024-03-08'
WHEN ENROLLMENT_ID = 9 THEN '2024-03-09'
WHEN ENROLLMENT_ID= 10 THEN '2024-03-10'
END 
WHERE ENROLLMENT_ID IN (1,2,3,4,5,6,7,8,9,10);

UPDATE ENROLLMENTS SET ATTENDANCE = 
CASE 
WHEN  ENROLLMENT_ID = 1 THEN 100
WHEN ENROLLMENT_ID = 2 THEN 95
WHEN ENROLLMENT_ID = 3 THEN  86
WHEN ENROLLMENT_ID = 4 THEN 77
WHEN ENROLLMENT_ID= 5 THEN 65
WHEN ENROLLMENT_ID = 6 THEN 55
WHEN ENROLLMENT_ID = 7 THEN  45
WHEN ENROLLMENT_ID= 8 THEN 88
WHEN ENROLLMENT_ID = 9 THEN 76
WHEN ENROLLMENT_ID= 10 THEN 66
END 
WHERE ENROLLMENT_ID IN (1,2,3,4,5,6,7,8,9,10);

UPDATE ENROLLMENTS SET WITHDRAWN = 
CASE 
WHEN  ENROLLMENT_ID = 1 THEN 0 
WHEN ENROLLMENT_ID = 2 THEN 0
WHEN ENROLLMENT_ID = 3 THEN 1
WHEN ENROLLMENT_ID = 4 THEN 0
WHEN ENROLLMENT_ID= 5 THEN 1
WHEN ENROLLMENT_ID = 6 THEN 0
WHEN ENROLLMENT_ID = 7 THEN  0
WHEN ENROLLMENT_ID= 8 THEN 1
WHEN ENROLLMENT_ID = 9 THEN 0
WHEN ENROLLMENT_ID= 10 THEN 1
END 
WHERE ENROLLMENT_ID IN (1,2,3,4,5,6,7,8,9,10);

SELECT*FROM ENROLLMENTS;

/* Question 7: 
Implement a CASE statement in each table to address a real-life scenario. */ 
  
  -- UPDATING ENROLLMENT THROUGH AND CLAUSE
UPDATE ENROLLMENTS
	SET GRADE =
    CASE 
    WHEN COURSE_ID BETWEEN 1 AND 2 THEN 'A+' 
    WHEN  COURSE_ID = 3 OR 4 THEN 'B+' 
    ELSE 'NO'
    END; 
    
-- UPDATING 
SELECT*FROM STUDENTS; 

UPDATE STUDENTS
	SET PHONE_NUMBER =
    CASE 
    WHEN STUDENT_ID >2 THEN 894395945
    WHEN  STUDENT_ID <= 3 OR 4 THEN  23446344
    ELSE '8438748347'
    END; 
    
    UPDATE COURSES
	SET CREDIT_HOURS =
    CASE 
    WHEN COURSE_ID = 2 THEN 8
    WHEN  COURSE_ID <= 3 OR 4 THEN  4
    ELSE '2'
    END; 


COMMIT;  


select*from students;
select*from courses;
select*from enrollments;
